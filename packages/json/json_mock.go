// Code generated by MockGen. DO NOT EDIT.
// Source: package/json/json.go

// Package json is a generated GoMock package.
package json

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJson is a mock of Json interface.
type MockJson struct {
	ctrl     *gomock.Controller
	recorder *MockJsonMockRecorder
}

// MockJsonMockRecorder is the mock recorder for MockJson.
type MockJsonMockRecorder struct {
	mock *MockJson
}

// NewMockJson creates a new mock instance.
func NewMockJson(ctrl *gomock.Controller) *MockJson {
	mock := &MockJson{ctrl: ctrl}
	mock.recorder = &MockJsonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJson) EXPECT() *MockJsonMockRecorder {
	return m.recorder
}

// ErrorResponse mocks base method.
func (m *MockJson) ErrorResponse(w http.ResponseWriter, r *http.Request, statusCode int, message interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorResponse", w, r, statusCode, message)
}

// ErrorResponse indicates an expected call of ErrorResponse.
func (mr *MockJsonMockRecorder) ErrorResponse(w, r, statusCode, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResponse", reflect.TypeOf((*MockJson)(nil).ErrorResponse), w, r, statusCode, message)
}

// SuccessResponse mocks base method.
func (m *MockJson) SuccessResponse(w http.ResponseWriter, r *http.Request, statusCode int, message, data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SuccessResponse", w, r, statusCode, message, data)
}

// SuccessResponse indicates an expected call of SuccessResponse.
func (mr *MockJsonMockRecorder) SuccessResponse(w, r, statusCode, message, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResponse", reflect.TypeOf((*MockJson)(nil).SuccessResponse), w, r, statusCode, message, data)
}
