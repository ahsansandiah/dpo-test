// Code generated by MockGen. DO NOT EDIT.
// Source: package/log/log.go

// Package log is a generated GoMock package.
package log

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// CustomLog mocks base method.
func (m *MockLog) CustomLog(r *http.Request, level string, data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CustomLog", r, level, data)
}

// CustomLog indicates an expected call of CustomLog.
func (mr *MockLogMockRecorder) CustomLog(r, level, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomLog", reflect.TypeOf((*MockLog)(nil).CustomLog), r, level, data)
}

// ErrorLog mocks base method.
func (m *MockLog) ErrorLog(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorLog", ctx, err)
}

// ErrorLog indicates an expected call of ErrorLog.
func (mr *MockLogMockRecorder) ErrorLog(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorLog", reflect.TypeOf((*MockLog)(nil).ErrorLog), ctx, err)
}

// HttpLog mocks base method.
func (m *MockLog) HttpLog(ctx context.Context, r *http.Request, payload, response []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HttpLog", ctx, r, payload, response)
}

// HttpLog indicates an expected call of HttpLog.
func (mr *MockLogMockRecorder) HttpLog(ctx, r, payload, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpLog", reflect.TypeOf((*MockLog)(nil).HttpLog), ctx, r, payload, response)
}
